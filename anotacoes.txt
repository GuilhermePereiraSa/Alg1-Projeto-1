Permutação Direta:
Para n cidades, existem (n - 1)! possíveis rotas (supondo que a cidade de partida seja fixada).
Para cada rota, você calcula a soma das distâncias entre as cidades em ordem.

Empilhar por comparação cidades e desempilhar ao finalizar uma análise de rota mais curta.


Melhoria dentro da Força Bruta: "Backtracking"
Uma maneira de melhorar marginalmente a eficiência dentro da abordagem de força bruta (sem abandonar 
a filosofia brute force) é utilizar uma técnica chamada backtracking:

*Você "poda" sub-"bons" caminhos.
Enquanto você está construindo as rotas, abandone rotas que já são piores do que a melhor encontrada 
até o momento. Ou seja, se a rota parcial que você está explorando já é mais cara do que a melhor rota 
encontrada até então, você pode parar de explorar essa rota.Exemplo: Se em algum ponto intermediário 
você já acumulou um custo que ultrapassa a menor  rota conhecida, você para de construir essa rota 
(poda o ramo). Na prática, essa técnica pode economizar tempo considerável, especialmente se existirem 
rotas claramente ruins a serem eliminadas cedo.




    A ideia é usar uma pilha sequencial e diminuir pra O(n - 1) as outras n-1 cidades, pra ficar tipo uma busca 
sequencial. Distância de AB_(1) vai ser empilhada, seguindo nao operações comuns da pilha de soma, etc, 
mas sim decomparação. Fazemos então um "compare" para a Pilha, para reutilizarmos isso para o resto das opções.

A parte da ideia, na real, é a seguinte: dá pra fazer tipo: ou até mesmo: Distância de AB(1) vai ser empilhada,
 seguindo nao operações comuns da pilha de soma, etc, mas sim de comparação. Começando da primeira cidade, a 
 de origem, escolhemos uma distância que parece promissora a empilhando na pilha, AB_(1) é a primeira distância,
  de 1 à 2, por exemplo com 1 como origem. A AB_(2) é 1 à 3, e se ela for menor que a já empilhada, então ela 
  se torna uma solução ótima para a saída da cidade 1. 

Exemplo:
● Arquivo de entrada
4 - n cidades
2 - origem
5 - n arestas

(*)
1 2 10
1 3 15
1 4 20
2 4 25
3 4 30

as n arestas indicam quantas possibilidades serão colocadas logo após, que é justamente o (*).
Agora, estudando o geral, visualizando como Cidade A | Cidade B | Distância, como um vetor só, numa pilha
sequencial, se soubermos o tamanho, então, ficaríamos com: {1,2,10, 1, 3, 15, 1,4,20, 2, 4, 25, 3, 4, 30}.

O 2, que é o inicial, tem possibilidades de ir para o 1 ou 4. Ele opta pelo 1, por menor distância. Agora
precisamos ir da Cidade B, primeira iteração, e interpretá-la como Cidade A, para uma outra Cidade, no caso,
agora uma Cidade B. 1 opta por 3, que tem valor 15 apenas, agora, seguindo subsequentemente, a 3 não podendo
voltar para a 1, e nem podendo ir para a 2, não por falta de aresta (também tem isso), mas por que é a última
Cidade que deve ser contemplada. 3 opta então pela 4 por falta de opção. E da 4 só falta irmos para a 2.

Além do mais, não podemos esquecer que cada ida tem seu valor de distância, que deve ser incrementado ao final
de tudo. 
